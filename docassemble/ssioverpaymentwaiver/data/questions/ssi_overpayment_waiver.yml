---
metadata:
  title: SSI Overpayment Waiver Request
  short title: Overpayment Waiver
  revision_date: 2019-09-29
---
features:
  question help button: True
  default icons: material icons
  navigation: True
  javascript: 
    - ssa.js
    - phone.js
---
include:
  - ssa_643.yml
  - financial_statement.yml
  #- docassemble.gbls:basic-questions-gbls.yml
  - docassemble.ssa:ssa.yml
---
objects:
  - recordee: Individual
  - overpaid_persons: DAList.using(object_type=Individual,there_is_another=False)
  - beneficiary: Individual
---
modules:
  - docassemble.ssa.ssa
  - .fix_currency
---

sections:
  - Getting started
  - Who is requesting a waiver?
  - Information about the overpayment
  - Financial information
  - Finishing up
---
id: interview order
mandatory: True
scan for variables: False
code: |
  nav.set_section('Getting started')
  intro_screen
  client.name.first

  nav.set_section('Who is requesting a waiver?')
  recordee.name.first
  recordee.ssn

  if not household.there_are_any:
    household.target_number = 0
    household.gathered = True

  if not recordee == client:
    relationship_to_overpaid
  else:
    client_is_rep_payee = False
  
  beneficiary.name.first
  
  nav.set_section('Information about the overpayment')
  
  agree_overpaid
  if not agree_overpaid:
    continue_anyway
  
  if only_change_monthly_due:
    ssa_634
  else:
    pass

  payment_type
  overpayment_reason
  overpayment_explanation

  overpayment_benefits_used_for    
  overpayment_why_not_at_fault  

  if has_spouse:
    spouse.name.first
  if household.there_are_any:
    review_household_members

  if overpaid_persons.there_are_any:
    review_overpaid_persons
  
  if not possess_overpayment:
    if possessed_overpayment_at_notice:
      cant_return_explanation
  else:
    pay_ssa_explanation
  
  overpayment_pay_less_reasons
  affordable_amount

  if informed_ssa:
    if not informed_orally:
      how_when_where
    benefits_changed_after_contact

  first_overpayment

  gave_cash_after_notice
  expect_change
  
  nav.set_section('Financial information')
  evaluate_if_receives_benefits # We may already know--use code to set if true
  received_ssi
  if receives_benefits:
    receives_benefits_type
    cash_amount = DAEmpty()
    vehicles = DAEmpty()
    household.jobs = DAEmpty()
    household.incomes = DAEmpty()
    client.jobs = DAEmpty()
    client.incomes =  DAEmpty()
    spouse.jobs = DAEmpty()
    spouse.incomes = DAEmpty()
    expenses = DAEmpty()
    real_estate = DAEmpty()
    assets = DAEmpty()
    assets_cannot_be_sold = DAEmpty()
    assets_cannot_be_converted = DAEmpty()
    accounts_special_purpose = DAEmpty()
    dont_need_financials_explanation
    expenses_exceed_income = DAEmpty()
    expense_other_details = DAEmpty()
  else:
    need_financials_explanation
    cash_amount
    financial_statement_questions
    if assets.there_are_any:
      accounts_special_purpose
    if non_cash_assets:
      assets_cannot_be_converted
    if vehicles.there_are_any or real_estate.there_are_any:
      assets_cannot_be_sold
    if expenses_exceed_income:
      expenses_exceed_income_explanation
    
  nav.set_section('Finishing up')
  client.address.address
  
  saw_signature_choice
  if not (signature_choice == 'paper'):
    client.signature
    
  download_pdf
  #financial_statement_download_screen
---
code: |
  has_sellable_assets =   vehicles.there_are_any or real_estate.there_are_any
---
code: |
  if recordee.name.full() == client.name.full() and payment_type == 'SSI':
    we_think_recordee_is_client = True
    receives_benefits = True
    receives_benefits_type_options = 'SSI'
    receives_benefits_type = 'SSI'
    receives_ssi = True
    received_ssi = False
  else:
    we_think_recordee_is_client = False
  evaluate_if_receives_benefits = True
---
id: intro
question: |
  Social Security Overpayment Waiver or Change
subquestion: |
  This interview is for someone who has to pay back money to the Social Security
  Administration (SSA). This money is called an "overpayment".
  
  You can use this interview to ask the SSA to let you pay back less money.
  You can also ask them to let you have more time to pay them back.
  
  You might need to tell the SSA a lot about how you and people who depend on you
  earn and spend money. You should get your bank statements, utility bills, and 
  any pay stubs ready before you start.
  
  You will need to put your Social Security Number on this form. You are the only
  person who can see it before you print and mail or deliver it. We will keep
  your private information safe. 
  
  Click help to learn more.
field: intro_screen
help: |
  All information sent to and from this server is encrypted
  using military-grade security standards.
  If you create an account on our system, your responses
  will be encrypted on our server at all times.
  Only someone with your password will be able to view the contents of your
  interview. It's important to both keep your password
  secure and not to lose it, because we will not be able
  to retrieve your interview without it.
---
id: who is overpaid
question: |
  Who got too much money from Social Security?
subquestion:
  Whose account is the overpayment on?
  Look at the letter about the overpayment that you got from Social Security.
  Look for a Social Security or Claim Number on the letter. Write down the name 
  of the person who has that
  Social Security number.
fields:
  - Myself: recordee
    datatype: object
    disable others: True
    choices: |
      [client]
  - First name: recordee.name.first
  - Middle name: recordee.name.middle
    required: False
  - Last name: recordee.name.last
  - Social Security Number: recordee.ssn
    datatype: ssn
    validate: is_valid_ssn
---
id: representation to overpaid
question: |
  What is your relationship to ${recordee}?
subquestion:
  You are ${recordee.possessive("___")}
fields:
  - no label: relationship_to_overpaid
    input type: checkboxes
    choices:
      - parent
      - spouse
      - representative payee
      - legal guardian
      - other
  - Other: other_relationship
    input type: area
    js show if: |
      val("relationship_to_overpaid") === "other"
---
code: |
  if recordee == client:
    client_is_rep_payee = False
---
code: |
  if not isinstance(expenses, DAEmpty): 
    expenses_exceed_income = expenses.total() > (client.incomes.total() + spouse.incomes.total() + household.incomes.total())
  else:
    expenses_exceed_income = False  
---
id: agree overpaid
question: |
  Do you agree that ${recordee} got too much money from Social Security?
subquestion: |
  Choose the answer that best matches what you understand about what happened.
  If you agree that ${recordee} was overpaid, you are _not_ agreeing that you
  need to pay the Social Security Administration back.
field: agree_overpaid
choices:
  - I disagree that ${recordee} got too much money. I think ${recordee} was paid the right amount: False
  - I agree ${recordee} was paid too much, even if it was an accident.: True
---
id: objective
question: |
  Do you want to **only** change the amount of money you pay each month?
subquestion: |
  [TODO: something better here. Note about if you disagree (say no)]
yesnomaybe: only_change_monthly_due
---
id: exit dont agree overpaid
decoration: hand-paper
question: |
  This may not be the right form for you.
subquestion: |
  This form is used when you want the Social Security Administration to lower
  the amount you owe them.
  If you don't agree with the Social Security that an overpayment happened, you may 
  want to appeal the overpayment instead. It's a good idea to talk to a lawyer.
buttons:
  - Keep going:
      code: |
        continue_anyway = True  
  - Restart: restart
  - Exit: exit
---
id: is rep payee
question: |
  Are you ${recordee}'s representative payee?
subquestion: |
  You said the overpayment was on ${recordee}'s account.
  At the time the Social Security Admininistration says you 
  were overpaid, were you a  
  representative payee for ${recordee}?
yesno: client_is_rep_payee
---
id: overpayment info
question: |
  Tell us about ${recordee}'s overpayment
fields:
  - Did you live with ${recordee} when the overpayment happened?: someone_else_lived_with_user
    datatype: yesnoradio
  - Did you receive any of the overpaid money?:   someone_else_user_received_benefits
    datatype: yesnoradio
---
id: how benefits used
question: |
  How were the overpaid benefits used?
fields:
  - no label: overpayment_benefits_used_for
    datatype: area
---
id: beneficiary info
question: |
  Who is the beneficiary?
subquestion: |
  Sometimes the person who uses the benefits is different than the person
  who earned them. For example, a spouse or dependent may get the benefits
  earned by someone who worked who retired or became disabled.
  If ${recordee} both earned and uses the benefits, just select their name here.
fields:
  - Somebody already mentioned: beneficiary
    datatype: object
    disable others: True
    choices: |
      everyone
  - First name: beneficiary.name.first
  - Last name: beneficiary.name.last
  - Address: beneficiary.address.address
    address autocomplete: True
  - Unit or Apt: beneficiary.address.unit
  - City: beneficiary.address.city
  - State: beneficiary.address.state
    code: |
      states_list()
  - Zip code: beneficiary.address.zip
  - County: beneficiary.address.county
    required: False      
---
id: additional users
question: |
  Is anyone else using this form with you?
subquestion: |
  If the Social Security Administration says that more than one person has to
  pay them back, they can use this form with you.
  
  If you think you and the other person may disagree about whose fault the
  overpayment was, it may be safest for you each to use your own forms.
  
  Do you want to list someone else on this form with you who will also be asking the
  Social Security Administration to waive the overpayment?
yesno: overpaid_persons.there_are_any
---
id: additional user info
question: |
  Who is the ${ordinal(i)} person who will use the form with you?
fields:
  - Somebody already mentioned: overpaid_persons[i]
    datatype: object
    disable others: True
    choices: |
      everyone_but_me
  - First name: overpaid_persons[i].name.first
  - Middle name: overpaid_persons[i].name.middle
    required: False
  - Last name: overpaid_persons[i].name.last
  - Social Security Number: overpaid_persons[i].ssn
    validate: is_valid_ssn
    datatype: ssn

---
id: social security number
generic object: Individual
question: |
  Social Security Number for ${x}
subquestion: |
  What is ${x}'s Social Security Number?
fields:
  - SSN: x.ssn
    validate: is_valid_ssn
    datatype: ssn  
under: |
  {Why} do we need this?
terms:
  - Why: |
      The Social Security Administration needs this number in order to 
      apply this overpayment waiver request to the right account.
---
id: review overpaid persons 
question: |
  Overpaid Persons
subquestion: |
  So far you have told us about ${overpaid_persons.number()} people who will
  be listed on this form with you. You can add another person, or click
  continue to go to the next question.
  ${ overpaid_persons.table }
  ${overpaid_persons.add_action()}
field: review_overpaid_persons
---
table: overpaid_persons.table
rows: overpaid_persons
columns:
  - Name: |
      row_item
  - Social Security Number: |
      row_item.ssn
edit:
  - row_item.name.first
  - row_item.ssn
---
id: overpaid person info
question: |
  Who is the ${ordinal(i)} overpaid person?  
fields:
  - Social Security Number: overpaid_persons[i].ssn
    validate: is_valid_ssn
    datatype: ssn
---
id: have overpaid money
question: |
  What happened to the overpaid checks or money?
fields:
  - Do you currently have any of the money you were overpaid? : possess_overpayment
    datatype: yesnoradio
  - How much do you still have?: possess_overpayment_amount
    show if: possess_overpayment
    datatype: currency
    step: 1
---
id: pay ssa explanation
question: |
  You will need to pay the Social Security Administration back
subquestion: |
  The Social Security administration will ask you to pay back the ${currency(possess_overpayment_amount)}
  that you said you still have from the overpayment. If that is less than the full 
  amount of the overpayment you may still need to pay back more, but you can ask for a 
  payment plan that works for you.
field: pay_ssa_explanation
---
id: had overpaid money
question: |
  What happened to the overpaid checks or money?
subquestion: |
  You said you no longer have any of the money you were overpaid.
fields: 
  - When you got the overpayment notice, did you have any of the money you were overpaid?: possessed_overpayment_at_notice
    datatype: yesnoradio
  - How much did you have then?: possessed_overpayment_at_notice_amount
    datatype: currency
    step: 1
    show if: possessed_overpayment_at_notice
    
---
id: receives benefits
question: |
  Are you currently receiving any needs-based cash benefits?
subquestion: |
  Answer yes if you personally receive cash welfare benefits, SSI, or a state cash 
  benefit that is based on your need.
yesno: receives_benefits  
help: |
  If you are receiving SSI or another benefit based on your need, you do not need
  to give the Social Security Administration as much information about your finances.
---
id: benefits kind
question: |
  What kind of cash benefits are you receiving?
fields: 
  - no label: receives_benefits_type_options
    choices:
      - SSI
      - TAFDC (Temporary Aid to Families with Dependent Children): TAFDC
      - other
  - Name of benefits program: receives_benefits_other
    show if:
      variable: receives_benefits_type_options
      is: 'other'
  - What is the account or claim number for your benefits?: receives_benefits_claim_number      

---
code: |
  if receives_benefits_type_options in ['SSI','TAFDC']:
    receives_benefits_type = receives_benefits_type_options
  else:
    receives_benefits_type = receives_benefits_other
---
id: dont need financial statement explanation
question: |
  You don't need to give us your financial information
subquestion: |
  Because you are receiving ${receives_benefits_type}, you don't need to answer the
  financial questions on this form. We'll finish asking for your contact information
  and signature on the next few pages.
field: dont_need_financials_explanation
---
id: do need financial statement explanation
question: |
  We will need to collect your financial information
subquestion: |
  In the next section, we will need to ask detailed information about how you,
  your spouse, and any household members earn money, as well as your household
  expenses. You will need to list any money you or a household member earns from 
  any source, including things like odd jobs, interest on bank accounts, and informal 
  payments for household expenses.
  
  Take a minute to make sure you have any pay stubs, tax returns or receipts for
  self-employment income, bank statements, and any monthly bills you pay.
field: need_financials_explanation  
---
id: cash on hand
question: |
  Cash on hand
fields:
  - How much money do you, your spouse, or anybody who depends on you have available as cash on hand?: cash_amount
    datatype: currency   
---
id: ssa payment type
question: |
  What kind of Social Security payments does ${recordee} receive?
field: payment_type
choices:
  - Supplemental Security Income (SSI): SSI
  - Social Security Disability (SSDI): other
  - Retirement benefits: other
  - ${recordee} no longer receives any money from Social Security: none
---
id: actions after overpayment notice
question: |
  What happened after you got the overpayment notice from Social Security?
subquestion: |
  Think about what happened after Social Security told you that ${recordee} got
  too much money.
fields:  
  - Did you lend or give away any property or cash after the notice of overpayment?: gave_cash_after_notice
    datatype: yesnoradio
  - Describe who got the property or cash, what it was and its value: gave_cash_after_notice_explanation
    datatype: area
    show if: gave_cash_after_notice
  - Did you get or sell any property or get any cash, (other than money you got from working), after the notice of overpayment?: received_cash_after_notice
    datatype: yesnoradio
  - Describe the property and sale price, or amount of cash received: received_cash_after_notice_explanation
    datatype: area
    show if: received_cash_after_notice
---
id: why cant return overpayment
question: |
  Why can't you return the overpayment any more?
subquestion: |
  You said that when you got the notice, you still had 
  ${ currency(possessed_overpayment_at_notice_amount) } from the overpayment.
  Using your own words, explain to the Social Security Administration 
  why you do not think you should have to return the ${ currency(possessed_overpayment_at_notice_amount) }
  anymore.
fields:
  - no label: cant_return_explanation
    datatype: area
---
id: expenses higher than income
question: |
  Your expenses are higher than your income
subquestion: |
  From the information you gave us, your monthly expenses
  are higher than your income. Explain how you are paying your bills
  below.
fields:
  - no label: expenses_exceed_income_explanation
    datatype: area
---
id: ability to pay
question: |
  Can you pay back the full amount?
subquestion: |
  Check any of the below that apply, or none of the above if you can pay everything
  back.
fields:
  - no label: overpayment_pay_less_reasons
    datatype: checkboxes
    choices:
      - I cannot afford to pay back the money
      - The overpayment was not my fault
      - Requiring me to pay back the overpayment is unfair
---
code: |
  overpayment_not_my_fault = overpayment_pay_less_reasons['The overpayment was not my fault']
  overpayment_cant_afford = overpayment_pay_less_reasons['The overpayment was not my fault']
---
id: amount can pay
question: |
  How much can you afford to pay back each month?
fields:
  - no label: affordable_amount
    datatype: currency
---
id: ssi payment status
question: |
  SSI Payments
fields:
  - Were you receiving SSI payments in the past?: received_ssi
    datatype: yesnoradio
  - Are you receiving SSI payments right now?: receives_ssi
    datatype: yesnoradio
---
id: overpayment reason
question: |
  What is the reason for the overpayment?
subquestion: |
  Look at the letter the Social Security Administration sent you.
  What reason is the best match for why the Social Security Administration
  says you were overpaid?
field: overpayment_reason
choices:
  - ${recordee} had too much money in a bank account
  - ${recordee} worked too many hours
  - ${recordee} went out of the country for more than 30 days
  - Something else
  - I don't know
---
id: overpayment explanation
question: |
  Why did the overpayment happen?
fields:
  - Use your own words to explain how the overpayment happened.: overpayment_explanation
    datatype: area
---
id: overpayment fault
question: |
  Why was the overpayment not your fault?
subquestion: |
  Earlier you said that SSA believes the overpayment happened because ${overpayment_reason}.
  Use your own words to explain why the overpayment wasn't your fault. Answer
  "I don't know" if that is the best answer.
fields:
  - Why was the overpayment not your fault?: overpayment_why_not_at_fault
    datatype: area
  - Why is it not your fault that you accepted the overpayment?: overpayment_why_accepted
    datatype: area
  - Why did you think you had a right to the money?: overpayment_why_had_right
    datatype: area
---
id: ssa contact
question: |
  Contact with Social Security Administration
subquestion: |
  You said that the reason for the overpayment was "${overpayment_reason}"
fields:
  - Did you tell the Social Security Administration that ${overpayment_reason}?: informed_ssa
    datatype: yesnoradio
  - Why not?: did_not_inform_ssa_explanation
    datatype: area
    show if:
      variable: informed_ssa
      is: False
  - Did you talk to someone (by phone or in person) about the fact that ${overpayment_reason}?: informed_orally
    datatype: yesnoradio
  - Who did you talk to?: who_spokewith
    show if: informed_orally
  - What did you say?: informed_what_said 
    datatype: area
    show if: informed_orally
---
id: ssa contact how
question: |
  How did you talk to Social Security?
subquestion: |
  You said that you told Social Security about the overpayment, but it wasn't by 
  phone or in person.
fields:
  - Explain how, when and where you told Social Security about ${overpayment_reason}.: how_when_where
    datatype: area
---
id: ssa contact followup
question: |
  Follow-up
subquestion: |
  You said that you contacted the Social Security Administration
  to let them know that ${overpayment_reason}.
fields:
  - After you reported that ${overpayment_reason}, did the Social Security Administration change your benefits amount?: benefits_changed_after_contact
    datatype: yesnoradio
    
  - Did you try to let them know about the overpayment more than once?: benefits_did_not_change_followed_up
    datatype: yesnoradio
    show if:  
      variable: benefits_changed_after_contact
      is: False
---
id: past overpayments
question: |
  Past overpayments
fields:
  - Is this the first time you have been overpaid?: first_overpayment
    datatype: yesnoradio
  - What Social Security Number were you overpaid on before?: past_overpayment_ssn
    validate: is_valid_ssn
    datatype: ssn
    show if:
      variable: first_overpayment
      is: False
  - Why were you overpaid in the past?: past_overpayment_explanation
    datatype: area
    show if:
      variable: first_overpayment
      is: False
  - If the reason is similar to the reason you were overpaid this time, please explain what you did to prevent it happening again.: past_overpayment_similar_explanation
    datatype: area
    show if:
      variable: first_overpayment
      is: False
      
---
id: expected financial changes
comment: |
  Financial expectation and funds availability
question: |
  Changes to your financial situation
subquestion: |
  Please think about your financial situation and any changes, whether
  for the better or worse, that you expect in the next 6 months.
fields:
  - In the next 6 months, I expect I or a household member: expect_change
    datatype: checkboxes
    choices:
      - Will receive a large tax refund
      - Will have a large bill repaid to me
      - Will receive a pay raise
      - Will receive a pay cut
      - Will pay a major bill (such as house repairs)
      - Other financial change for the better
      - Other financial change for the worse
  - Explain: expect_change_explanation
    datatype: area
    required: False
---
code: |
  if assets.there_are_any:
    cash_assets = [asset for asset in assets if asset.type in ['savings','checking']]
    #cash_assets = []
    non_cash_assets = [asset for asset in assets.elements if asset.type not in ['savings','checking']]
  else:
    cash_assets = []
    non_cash_assets = []
  fixed_assets = vehicles.elements + real_estate.elements
---
id: funds being saved
question: |
  Are any funds being saved for a special purpose?
subquestion: |
  You said that you or a household member have the following
  accounts that have cash on hand.
  
  Check any funds that are being saved for a special purpose.
fields:
  - no label: accounts_special_purpose
    datatype: object_checkboxes
    choices: cash_assets
    #object labeler: |
    #  lambda y: y.type + ':' +' '  + currency(y.balance)
  - Explain what the special purpose is: accounts_special_purpose_explanation
    datatype: area        
    required: False
---
id: convertable noncash assets
question: |
  Are there any assets with a balance or value that CANNOT be converted to cash?
subquestion: |
  You said that you or a household member have the following assets
  that have a "balance or value".

  Check any assets below that CANNOT be converted to cash.
fields:
  - no label: assets_cannot_be_converted
    datatype: object_checkboxes
    choices: non_cash_assets
    object labeler: |
      lambda y: y.type + ':' + ' ' + currency(y.balance)
  - Explain why the assets CANNOT be converted to cash: assets_cannot_be_converted_explanation
    datatype: area
    required: False
---
id: convertable cash assets
question: |
  Are there any assets that do not have a balance or value that CANNOT be sold or
  otherwise converted to cash?
subquestion: |
  You said that you or a household member have the following
  vehicles and real estate, other than the family car or house.

  Check any assets below that CANNOT be sold or otherwise converted
  to cash.
fields:
  - no label: assets_cannot_be_sold
    datatype: object_checkboxes
    choices: fixed_assets
    object labeler: |
      lambda y: (y.year_make_model()) if hasattr(y,'make') else y.description
  - Explain why the vehicle or property CANNOT be sold: assets_cannot_be_sold_explanation
    datatype: area
    required: False
---
id: contact information
generic object: Individual
question: |
  ${x}'s Contact Information
fields:
  - Home or cell phone number: x.phone_number
  - Work phone number: x.phone_work
    required: False
  - Address: x.address.address
    address autocomplete: True
  - Unit or Apt: x.address.unit
    required: False
  - City: x.address.city
  - State: x.address.state
    code: |
      states_list()
  - Zip code: x.address.zip
  - County: x.address.county
    required: False
---
id: signature method
question: |
  Signature
subquestion: |
  Before you mail or deliver this form, you need to sign it.
fields:
  - Where do you want to sign?: signature_choice
    input type: radio
    default: phone
    choices:
      - Sign on this device: this device
      - Sign on paper after I print the forms: paper
      - Sign on my phone: phone
    show if: 
      code: |
        device().is_pc      
  - note: |
      To sign on your phone, point your phone camera at this barcode and click the 
      barcode or link icon that appears in the camera view. Click continue on your 
      phone.
      
      <center>
      ${interview_url_as_qr()}
      </center>

    show if: 
      code: |
        device().is_pc    
  - Or, text me a link at this phone number: link_cell
    show if: 
      code: |
        device().is_pc        
    required: false
  - note: |
      Once this screen has loaded on your mobile device, click continue.
    show if: 
      code: |
        not device().is_pc            
continue button field: saw_signature_choice
help: |
  Many smartphones will automatically find the link on this screen. The link
  may "float" up from the screen into a small icon you can click.
  If your phone does not do this, use the text option instead.
  
---
id: sign on phone
question: Sign on your phone
subquestion: |
  % if device().is_pc:
  Click continue on this screen once you have finished signing on your phone.
  % else:
  Click continue on this screen when you're ready to sign.
  % endif
  
field: signature_wait_screen  
---
id: signature
question: Sign below
subquestion: |
signature: client.signature
under: |
  ${ client }
---
code: |
  client_support = client.incomes.total(type='other') > 0 if not isinstance(client.incomes, DAEmpty) else []
  spouse_support = spouse.incomes.total(type='other') > 0 if not isinstance(spouse.incomes, DAEmpty) else []
  household_support = household.incomes.total(type='other') > 0 if not isinstance(household.incomes, DAEmpty) else []
    
  receives_support = client_support or spouse_support or household_support
  all_incomes = client.incomes + spouse.incomes + household.incomes
  
  if receives_support:
    support_sources = [income.name for income in all_incomes if income.type == 'other support']
  else:
    support_sources = []
    
---
code: |
  client_pensions = client.incomes.matches('pension')
  spouse_pensions = spouse.incomes.matches('pension')
  household_pensions = household.incomes.matches('pension')
---
code: |
  savings = assets.matches('savings')
---
code: |
  grand_total = (client.incomes.total(period_to_use=12) +
                  spouse.incomes.total(period_to_use=12) + 
                  household.incomes.total(period_to_use=12) +
                  client.jobs.net_total(period_to_use=12) +
                  spouse.jobs.net_total(period_to_use=12) +
                  household.jobs.net_total(period_to_use=12) +
                  assets.total(period_to_use=12) 
                  )

  monthly_expenses = expenses.total()

  adjusted_expenses = monthly_expenses + 25 # See Question 20C
---
code: |
  if len(cash_assets) > 0:
    cash_kept_special_purpose = len(accounts_special_purpose) > 0
    cash_special_purpose_no_money_on_hand = False
  else:
    cash_kept_special_purpose = False
    cash_special_purpose_no_money_on_hand = True
---
code: |
  room_and_board_explanation = comma_and_list([item.room_and_board_explanation for item in all_incomes if item.type == "room and board"])     
---
code: |
  asset_other_description = comma_and_list([item.other_type for item in assets if item.type == "other"])
---
code: |
  expense_support_details = comma_and_list([item.support_explanation for item in expenses if item.type == "support"])
---
id: download pdf
question: Here is your document.
event: download_pdf
attachment:
  - name: SSA-632
    filename: SSA-632
    pdf template file: ssa-632.pdf
    checkbox export value: "On"
    fields:
      - "record_owner": ${recordee}
      - "record_ssn": ${recordee.ssn}
      - "requestor_1": |
          ${overpaid_persons.item(0)} ${overpaid_persons.item(0).ssn}
      - "requestor_2": |
          ${overpaid_persons.item(1)} ${overpaid_persons.item(1).ssn}
      - "requestor_3": |
          ${overpaid_persons.item(2)} ${overpaid_persons.item(2).ssn}
      - "requestor_4": |
          ${overpaid_persons.item(3)} ${overpaid_persons.item(3).ssn}
      - "requestor_5": |
          ${overpaid_persons.item(4)} ${overpaid_persons.item(4).ssn }     
      - "requestor_6": |
          ${overpaid_persons.item(5)} ${overpaid_persons.item(5).ssn}
      - "requestor_7": |
          ${overpaid_persons.item(6)} ${overpaid_persons.item(6).ssn}
      - "requestor_8": |
          ${overpaid_persons.item(7)} ${overpaid_persons.item(7).ssn}      
      - "overpayment_not_my_fault": ${yesno(overpayment_pay_less_reasons.any_true())}
      - "overpayment_cant_afford_full_benefit": ${yesno(overpayment_cant_afford)}
      - "overpayment_affordable_amount": ${currency(affordable_amount) if overpayment_cant_afford and not payment_type == 'none' else ''}
      - "overpayment_dont_receive_ssi": ${yesno(received_ssi)}
      - "overpayment_dont_receive_ssi_affordable_amount": ${currency(affordable_amount) if received_ssi else ''}
      - "overpayment_receive_ssi": ${yesno(receives_ssi)}
      - "overpayment_receive_ssi_affordable_amount": ${currency(affordable_amount) if receives_ssi else ''}
      - "rep_received_benefits_no": ${noyes(client_is_rep_payee)}
      - "rep_received_benefits_yes": ${yesno(client_is_rep_payee)}
      - "beneficiary_name": ${beneficiary.name.full() + ' ' + beneficiary.address.block() if client_is_rep_payee else ''}
      - "benefits_used_for": ${ overpayment_benefits_used_for if client_is_rep_payee else ''}
      - "someone_else_lived_with_user_yes": ${yesno(someone_else_lived_with_user) if not recordee == client else ''} 
      - "someone_else_lived_with_user_no": ${noyes(someone_else_lived_with_user) if not recordee == client else ''} 
      - "someone_else_user_received_benefits_no": ${noyes(someone_else_user_received_benefits) if not recordee == client else ''}
      - "someone_else_user_received_benefits_yes": ${yesno(someone_else_user_received_benefits) if not recordee == client else ''}
      - "someone_else_overpayment_explanation": ${ overpayment_explanation if not recordee == client else ''}
      - "why_thought_entitled": ${overpayment_why_had_right}
      - "told_ssa_yes": ${yesno(informed_ssa)}
      - "told_ssa_no": ${noyes(informed_ssa)}
      - "why_didnt_tell_ssa": ${ did_not_inform_ssa_explanation if not informed_ssa else '' }
      - "told_ssa_how": ${ informed_what_said if informed_ssa and informed_orally else '' }
      - "contacted_ssa_again_yes": ${benefits_did_not_change_followed_up if informed_ssa and not benefits_changed_after_contact else ''}
      - "contacted_ssa_again_no": ${benefits_did_not_change_followed_up if informed_ssa and not benefits_changed_after_contact else ''}
      - "overpaid_before_yes": ${noyes(first_overpayment)}
      - "overpaid_before_no": ${yesno(first_overpayment)}
      - "overpaid_before_ssn": ${past_overpayment_ssn if not first_overpayment else ''}
      - "overpaid_before_steps_to_prevent": ${ past_overpayment_explanation if not first_overpayment else ''}
      - "possess_money_yes": ${yesno(possess_overpayment)}
      - "possess_money_amount": ${currency(possess_overpayment_amount) if possess_overpayment else ''}
      - "possess_money_no": ${noyes(possess_overpayment)}
      - "possessed_money_yes": ${yesno(possessed_overpayment_at_notice)}
      - "possessed_money_amount": ${currency(possessed_overpayment_at_notice_amount) if possessed_overpayment_at_notice else ''}
      - "possessed_money_no": ${noyes(possessed_overpayment_at_notice)}
      - "why_can_keep": ${cant_return_explanation if not possess_overpayment and possessed_overpayment_at_notice else ""}
      - "gave_away_yes": ${yesno(gave_cash_after_notice)}
      - "gave_away_no": ${noyes(gave_cash_after_notice)}
      - "gave_away_details": ${gave_cash_after_notice_explanation if gave_cash_after_notice else ''}
      - "sold_yes": ${yesno(received_cash_after_notice)}
      - "sold_no": ${noyes(received_cash_after_notice)}
      - "sold_details": ${received_cash_after_notice_explanation if received_cash_after_notice else ''}
      - "receiving_benefits_yes": ${yesno(receives_ssi)}
      - "receiving_benefits_no": ${noyes( receives_ssi)}
      - "receiving_benefits_name": ${receives_benefits_type if receives_benefits  else ''}
      - "receiving_benefits_claim_number": ${receives_benefits_claim_number if receives_benefits and not receives_ssi else ''}
      - "dependent_1": ${household.item(0)}
      - "dependent_1_age": ${household.item(0).age}
      - "dependent_1_relationship": ${household.item(0).relationship}
      - "dependent_2": ${household.item(1)}
      - "dependent_2_age": ${household.item(1).age}
      - "dependent_2_relationship": ${household.item(1).relationship}
      - "dependent_3": ${household.item(2)}
      - "dependent_3_age": ${household.item(2).age}
      - "dependent_3_relationship": ${household.item(2).relationship}
      - "dependent_4": ${household.item(3)}
      - "dependent_4_age": ${household.item(3).age}
      - "dependent_4_relationship": ${household.item(3).relationship}
      - "cash_amount": ${currency(cash_amount)}
      - "savings_owner_1": ${savings.item(0).owner}
      - "savings_amount_1": ${currency(savings.item(0).balance)}
      - "savings_monthly_1": ${currency(savings.item(0).amount(period_to_use=12))}
      - "savings_explanation_1": ${savings.item(0).no_income_explanation if savings.item(0).value == 0 else ''}
      - "savings_owner_2": ${savings.item(1).owner}
      - "savings_amount_2": ${currency(savings.item(1).balance)}
      - "savings_monthly_2": ${currency(savings.item(1).amount(period_to_use=12))}
      - "savings_explanation_2": ${savings.item(1).no_income_explanation if savings.item(1).value == 0 else ''}
      - "cd_explanation": ${assets.matches('cd').item(0).no_income_explanation if assets.matches('cd').item(0).value == 0 else ''}
      - "cd_owner": ${comma_and_list(assets.owners(type='cd'))}
      - "cd_amount": ${currency(assets.balance_total(type='cd'))}
      - "cd_monthly": ${currency(assets.total(type='savings',period_to_use=12))}
      - "ira_owner": ${comma_and_list(assets.owners(type='ira'))}
      - "ira_amount": ${currency(assets.balance_total(type='ira'))}
      - "ira_monthly": ${currency(assets.total(type='ira',period_to_use=12))}
      - "ira_explanation": ${assets.matches('ira').item(0).no_income_explanation if assets.matches('ira').item(0).value == 0 else ''}
      - "mutualfund_explanation": ${assets.matches('mutual fund').item(0).no_income_explanation if assets.matches('mutual fund').item(0).value == 0 else ''}
      - "mutalfund_owner": ${comma_and_list(assets.owners(type='mutual fund'))}
      - "mutualfund_amount": ${currency(assets.balance_total(type='mutual fund'))}
      - "mutualfund_monthly": ${currency(assets.total(type='mutual fund',period_to_use=12))}
      - "stocks_explanation":  ${assets.matches('stocks').item(0).no_income_explanation if assets.matches('stocks').item(0).value == 0 else ''}
      - "stocks_owner": ${comma_and_list(assets.owners(type='stocks'))}
      - "stocks_amount": ${currency(assets.balance_total(type='stocks'))}
      - "stocks_monthly": ${currency(assets.total(type='stocks',period_to_use=12))}
      - "trust_explanation":  ${assets.matches('trust').item(0).no_income_explanation if assets.matches('trust').item(0).value == 0 else ''}
      - "trust_owner": ${comma_and_list(assets.owners(type='trust'))}
      - "trust_amount": ${currency(assets.balance_total(type='trust'))}
      - "trust_monthly": ${currency(assets.total(type='trust',period_to_use=12))}
      - "checking_owner": ${comma_and_list(assets.owners(type='checking'))}
      - "checking_amount": ${currency(assets.balance_total(type='checking'))}
      - "checking_monthly": ${currency(assets.total(type='checking',period_to_use=12))}
      - "checking_explanation": ${assets.matches('checking').item(0).no_income_explanation if assets.matches('checking').item(0).value == 0 else ''}
      - "asset_other_owner": ${comma_and_list(assets.owners(type='other'))}
      - "asset_other_amount": ${currency(assets.balance_total(type='other'))}
      - "asset_other_monthly": ${currency(assets.total(type='other',period_to_use=12))}
      - "asset_other_explanation": ${assets.matches('other').item(0).no_income_explanation if assets.matches('other').item(0).value == 0 else ''}
      - "asset_other_description": ${asset_other_description}
      - "countable_asset_total_amount": ${currency(assets.balance_total())}
      - "countable_asset_total_monthly": ${currency(assets.total(period_to_use=12))}
      - "vehicle_owner_1": ${vehicles.item(0).owner}
      - "vehicle_year_make_model_1": ${vehicles.item(0).year_make_model() }
      - "vehicle_pv_1": ${currency(vehicles.item(0).value)}
      - "vehicle_loan_balance_1": ${currency(vehicles.item(0).balance)}
      - "vehicle_purpose_1": ${vehicles.item(0).primary_purpose}
      - "vehicle_owner_2": ${vehicles.item(1).owner}
      - "vehicle_year_make_model_2": ${vehicles.item(1).year_make_model() }
      - "vehicle_pv_2": ${currency(vehicles.item(1).value)}
      - "vehicle_loan_balance_2": ${currency(vehicles.item(1).balance)}
      - "vehicle_purpose_2": ${vehicles.item(1).primary_purpose}
      - "vehicle_owner_3": ${vehicles.item(2).owner}
      - "vehicle_year_make_model_3": ${vehicles.item(2).year_make_model() }
      - "vehicle_pv_3": ${currency(vehicles.item(2).value)}
      - "vehicle_loan_balance_3": ${currency(vehicles.item(2).balance)}
      - "vehicle_purpose_3": ${vehicles.item(2).primary_purpose}
      - "real_property_owner_1": ${real_estate.item(0).owner}
      - "real_property_description_1": ${real_estate.item(0).description}
      - "real_property_value_1": ${currency(real_estate.item(0).market_value)}
      - "real_property_loan_balance_1": ${currency(real_estate.item(0).balance)}
      - "real_property_income_1": ${currency(real_estate.item(0).amount(period_to_use=12))}
      - "real_property_owner_2": ${real_estate.item(1).owner}
      - "real_property_description_2": ${real_estate.item(1).description}
      - "real_property_value_2": ${currency(real_estate.item(1).market_value)}
      - "real_property_loan_balance_2": ${currency(real_estate.item(2).balance)}
      - "real_property_income_2": ${currency(real_estate.item(0).amount(period_to_use=12))}
      - "real_property_owner_3": ${real_estate.item(2).owner}
      - "real_property_description_3": ${real_estate.item(2).description}
      - "real_property_value_3": ${currency(real_estate.item(2).market_value)}
      - "real_property_loan_balance_3": ${currency(real_estate.item(2).balance)}
      - "real_property_income_3": ${currency(real_estate.item(2).amount(period_to_use=12))}
      - "real_property_owner_4": ${real_estate.item(3).owner}
      - "real_property_description_4": ${real_estate.item(3).description}
      - "real_property_value_4": ${currency(real_estate.item(3).market_value)}
      - "real_property_loan_balance_4":  ${currency(real_estate.item(3).balance)}
      - "real_property_income_4": ${currency(real_estate.item(3).amount(period_to_use=12))}
      - "user_employed_yes": ${yesno(client.jobs.there_are_any)}
      - "user_employed_no": ${noyes( client.jobs.there_are_any)}
      - "user_wages_gross": ${currency(client.jobs.total(period_to_use=12))}
      - "user_wages_net": ${currency(client.jobs.net_total(period_to_use=12))}
      - "user_employer_name_address_phone": ${client.jobs.item(0).name_address_phone()}
      - "spouse_employed_yes": ${yesno(spouse.jobs.there_are_any)}
      - "spouse_employed_no": ${noyes( spouse.jobs.there_are_any)}
      - "spouse_wages_gross": ${currency(spouse.jobs.total(period_to_use=12))}
      - "spouse_wages_net": ${currency(spouse.jobs.net_total(period_to_use=12))}
      - "spouse_employer_name_address_phone": ${spouse.jobs.item(0).name_address_phone()}
      - "dependent_employed_yes": ${yesno(household.jobs)}
      - "dependent_employed_no": ${noyes( household.jobs)}
      - "dependent_employed_names": ${household.jobs.item(0).whose_job}
      - "dependent_wages_gross": ${currency(household.jobs.gross_total())}
      - "dependent_wages_net": ${currency(household.jobs.net_total())}
      - "dependent_employer_name_address_phone": ${household.jobs.item(0).name_address_phone()}
      - "receive_support_yes": ${yesno(receives_support)}
      - "receive_support_no": ${noyes( receives_support)}
      - "receive_support_source": ${comma_and_list(support_sources)}
      - "receive_support_amount": ${currency(client.incomes.total(type='other support') + spouse.incomes.total(type='other support') + household.incomes.total(type='other support'))}
      - "user_net_pay_total": ${currency(client.jobs.net_total(period_to_use=12))}
      - "spouse_net_pay_total": ${currency(spouse.jobs.net_total(period_to_use=12))}
      - "dependent_net_pay_total": ${currency(household.jobs.net_total(period_to_use=12))}
      - "user_ss_total": ${currency(client.incomes.total(period_to_use=12, type='SSR'))}
      - "spouse_ss_total": ${currency(spouse.incomes.total(period_to_use=12, type='SSR'))}
      - "dependent_ss_total": ${currency(household.incomes.total(period_to_use=12, type='SSR'))}
      - "spouse_ssi_total": ${currency(spouse.incomes.total(period_to_use=12, type='SSI'))}
      - "user_ssi_total": ${currency(client.incomes.total(period_to_use=12, type='SSI'))}
      - "dependent_ssi_total": ${currency(household.incomes.total(period_to_use=12, type='SSI'))}
      - "pension_type_1": ${client_pensions.item(0).name + spouse_pensions.item(0).name + household_pensions.item(0).name}
      - "user_pension_1": ${currency(client_pensions.item(0).amount(period_to_use=12))}
      - "spouse_pension_1": ${currency(spouse_pensions.item(0).amount(period_to_use=12))}
      - "dependent_pension_1": ${currency(household_pensions.item(0).amount(period_to_use=12))}
      - "pension_type_2": ${client_pensions.item(1).name.full() + ' ' + spouse_pensions.item(1).name.full() + ' ' +  household_pensions.item(1).name.full()}
      - "user_pension_2": ${currency(client_pensions.item(1).amount(period_to_use=12))}
      - "spouse_pension_2": ${currency(spouse_pensions.item(1).amount(period_to_use=12))}
      - "dependent_pension_2": ${currency(household_pensions.item(1).amount(period_to_use=12))}
      - "other_assistance_type": ${client.incomes.matches('public assistance').item(0).name + ' ' + spouse.incomes.matches('public assistance').item(0).name + ' ' + household.incomes.matches('public assistance').item(0).name}
      - "user_other_assistance": ${currency(client.incomes.total(type='public assistance',period_to_use=12))}
      - "spouse_other_assistance": ${currency(spouse.incomes.total(type='public assistance',period_to_use=12))}
      - "dependent_other_assistance": ${currency(household.incomes.total(type='public assistance',period_to_use=12))}
      - "user_snap_total": ${currency(client.incomes.total(type='SNAP',period_to_use=12))}
      - "spouse_snap_total": ${currency(spouse.incomes.total(type='public assistance',period_to_use=12))}
      - "dependent_snap_total": ${currency(household.incomes.total(type='public assistance',period_to_use=12))}
      - "user_rent_income_total": ${currency(client.incomes.total(type='rent',period_to_use=12))}
      - "spouse_rent_income_total": ${currency(spouse.incomes.total(type='rent',period_to_use=12))}
      - "dependent_rent_income_total": ${currency(household.incomes.total(type='rent',period_to_use=12))}
      - "user_room_board_total": ${currency(client.incomes.total(type='room and board',period_to_use=12))}
      - "spouse_room_board_total": ${currency(spouse.incomes.total(type='room and board',period_to_use=12))}
      - "dependent_room_board_total": ${currency(household.incomes.total(type='room and board',period_to_use=12))}
      - "user_child_support_total": ${currency(client.incomes.total(type='child support',period_to_use=12))}
      - "spouse_child_support_total": ${currency(spouse.incomes.total(type='child support',period_to_use=12))}
      - "dependent_child_support_total": ${currency(household.incomes.total(type='child support',period_to_use=12))}
      - "user_other_support_total": ${currency(client.incomes.total(type='other support',period_to_use=12))}
      - "spouse_other_support_total": ${currency(spouse.incomes.total(type='other support',period_to_use=12))}
      - "dependent_other_support_total": ${currency(household.incomes.total(type='other support',period_to_use=12))}
      - "user_asset_income_total": ${currency(assets.total(owner=client,period_to_use=12))}
      - "spouse_asset_income_total": ${currency(assets.total(owner=spouse,period_to_use=12))}
      - "dependent_asset_income_total": ${currency(assets.total(period_to_use=12) - assets.total(owner=client,period_to_use=12) - assets.total(owner=spouse,period_to_use=12))}
      - "user_other_total": ${currency(client.incomes.total(type='other',period_to_use=12))}
      - "spouse_other_total": ${currency(spouse.incomes.total(type='other',period_to_use=12))}
      - "dependent_other_total": ${currency(household.incomes.total(type='other',period_to_use=12))}
      - "user_income_total": ${currency(client.incomes.total(period_to_use=12) + assets.total(owner=client,period_to_use=12) + client.jobs.total(period_to_use=12))}
      - "spouse_income_total": ${currency(spouse.incomes.total(period_to_use=12) + assets.total(owner=spouse,period_to_use=12) + spouse.jobs.total(period_to_use=12))}
      - "dependent_income_total": ${currency(household.incomes.total(period_to_use=12) + assets.total(period_to_use=12) - assets.total(owner=client,period_to_use=12) - assets.total(owner=spouse,period_to_use=12) + household.jobs.total(period_to_use=12))}
      - "grand_total": ${currency(grand_total)}
      - "remarks": ${room_and_board_explanation}
      #- "other_explanation": something # not used
      - "expense_rent": ${currency(expenses.total(type='rent',period_to_use=12))}
      - "expense_food": ${currency(expenses.total(type='food',period_to_use=12))}
      - "expense_utilities": ${currency(expenses.total(type='utilities',period_to_use=12))}
      - "expense_fuel": ${currency(expenses.total(type='fuel',period_to_use=12))}
      - "expense_clothing": ${currency(expenses.total(type='clothing',period_to_use=12))}
      - "expense_cc_minimum": ${currency(expenses.total(type='credit cards',period_to_use=12))}
      - "expense_property_tax": ${currency(expenses.total(type='property tax',period_to_use=12))}
      - "expense_fees": ${currency(expenses.total(type='other taxes',period_to_use=12))}
      - "expense_insurance_1": ${currency(expenses.matches('insurance').item(0).amount(period_to_use=12))}
      - "expense_insurance_2": ${currency(expenses.matches('insurance').item(1).amount(period_to_use=12))}
      - "expense_medical": ${currency(expenses.total(type='medical',period_to_use=12))}
      - "expense_car": ${currency(expenses.total(type='auto',period_to_use=12))}
      - "expense_transportation": ${currency(expenses.total(type='transportation',period_to_use=12))}
      - "expense_charity_1": ${currency(expenses.matches('charity').item(0).amount(period_to_use=12))}
      - "expense_charity_2": ${currency(expenses.matches('charity').item(1).amount(period_to_use=12))}
      - "expense_charity_3": ${currency(expenses.matches('charity').item(2).amount(period_to_use=12))}
      - "expense_loan_1": ${currency(expenses.matches('loan').item(0).amount(period_to_use=12))}
      - "expense_loan_2": ${currency(expenses.matches('loan').item(1).amount(period_to_use=12))}
      - "expense_support_1": ${currency(expenses.matches('support').item(0).amount(period_to_use=12))}
      - "expense_support_details": ${expense_support_details}
      - "expense_support_2": ${currency(expenses.matches('support').item(1).amount(period_to_use=12))}
      - "expenses_total": ${currency(expenses.total(period_to_use=12))}
      - "expense_other_details": ${expense_other_details}
      - "expense_other":  ${currency(expenses.total(type='other',period_to_use=12))}
      - "monthly_income": ${currency(grand_total)} 
      - "monthly_expenses": ${currency(monthly_expenses)}
      - "adjusted_expenses": ${currency(adjusted_expenses)}
      - "expenses_exceed_income_explanation": ${expenses_exceed_income_explanation if expenses_exceed_income else ''}
      - "financial_situation_will_change_yes": ${yesno(expect_change)}
      - "financial_situation_will_change_no": ${noyes(expect_change)}
      - "cash_special_purpose_no_amount_on_hand": ${yesno(cash_special_purpose_no_money_on_hand)}
      - "cash_special_purpose_money_available": ${noyes(cash_kept_special_purpose)}
      - "cash_special_purpose_money_needed": ${yesno(cash_kept_special_purpose)}
      - "special_purpose_explanation": ${accounts_special_purpose_explanation if cash_kept_special_purpose else ''}
      - "cant_convert_countable_asset_yes": ${yesno(assets_cannot_be_converted) if non_cash_assets else ''}
      - "cant_convert_countable_asset_no": ${noyes(assets_cannot_be_converted) if non_cash_assets else ''}
      - "cant_convert_countable_asset_explanation": ${assets_cannot_be_converted_explanation if non_cash_assets and assets_cannot_be_converted else ''}
      - "cant_convert_property_yes": ${yesno(assets_cannot_be_sold) if has_sellable_assets else ''}
      - "cant_convert_property_no": ${noyes(assets_cannot_be_sold) if has_sellable_assets else ''}
      - "cant_convert_property_explanation": ${assets_cannot_be_sold_explanation if has_sellable_assets and assets_cannot_be_sold else ''}
      #- "remarks_continued": something # TODO ? maybe not needed
      #- "remarks_continued_more": something # TODO?
      - "signature": ${client.signature if defined('client.signature') else ''}
      - "signature_date": ${today()}
      - "phone_work": ${client.phone_work}
      - "phone_home": ${client.phone_number}
      - "user_mailing_address": ${client.address.address}
      - "user_city_state": ${client.address.city + ' ' + client.address.state}
      - "user_zip": ${ client.address.zip}
      - "user_county": ${ client.address.county}